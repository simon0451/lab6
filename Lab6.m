% Lab 6 - Airfoil Lab
% Simon Popecki
% Information taken from a model NACA 0012 airfoil

%% 1. Compute the Density of Air in the Wind Tunnel from the Ideal Gas Law
clear all;
close all;
T = 296.5; %(K) the temperature during the experiment will be the average of the start and end temperatures
PGAGE = 161.746; %(Pa) the gage pressure during the experiment
P = 101325+PGAGE; %(Pa) total pressure - atmospheric plus gage for the time of the experiment(Using weather data from Durham yields same result)
R = 287.058; %gas constant for dry air, SI units
v = R*T/P; %solving for the specific volume of the gas (air)
rho = 1/v; %taking the inverse to solve for density (kg/m^3)

%% 2. Convert Height Readings on the Manometer to Pressure
load Lab6Data.mat; %loading the 
HTOP = 248.84; %conversion factor to convert inches of water to Pascals
%breaking the table up into each angle of attack, then converting all units
%to Pa
zeroDeg = Table1(:,1);
nineDeg = Table1(:,2);
eighteenDeg = Table1(:,3);

%gage pressures
zeroDeg = HTOP.*(zeroDeg(2:end)); %these ignore the first line of the table which is the angle of attack (evident by name)
nineDeg = HTOP.*(nineDeg(2:end));
eighteenDeg = HTOP.*(eighteenDeg(2:end));

%% 3. Find Mean Windspeed in the Wind Tunnel

%these values are reversed from what the lab says - it is assumed that the
%stagnation pressure will be bigger since it is static plus dynamic.

%gage pressures in Pa
stagP = (zeroDeg(1)+nineDeg(1)+eighteenDeg(1))/3; %finding the average stagnation pressure (this is static + dynamic)
staticP = (zeroDeg(2)+nineDeg(2)+eighteenDeg(2))/3; %finding the average static pressure
dynP = stagP-staticP; %solving for the dynamic pressure
vel = sqrt(2*dynP/rho); %this is the windspeed in the tunnel (m/s)
%% 4. Find Lift and Drag Coefficients Corresponding to Angle of Attack
%lift and drag measurements come from Table2
L = Table2(:,2); %the second column in Table2 is lift, units are Newtons
D = Table2(:,3); %the third column in Table2 is drag, units are Newtons
A = .15*.3; %planform area of the airfoil, units are square meters
%cL and cD arrays start at -9 deg. and end at 21 deg. (column 1 in Table2)
cL = L./(.5*rho*(vel^2)*A); %coefficient of lift from force balance data
cD = D./(.5*rho*(vel^2)*A); %coefficient of drag from force balance data

%% 5. Plot cL and cD as a Function of Angle of Attack
aoat = Table2(:,1); %the angles of attack in degrees

figure(1)
plot(aoat,cL,aoat,cD)
title('Lift and Drag Coefficients as a Function of Airfoil Angle')
xlabel('Angle of Attack (degrees, where 0° is horizontal)')
ylabel('Lift or Drag Coefficient')
legend('Coefficient of Lift','Coefficient of Drag','location','southeast')
grid on

%% 6. Plot cL/cD as a Function of Angle of Attack
C = cL./cD; %finding the lift to drag ratio of the airfoil with lift and drag coefficients

figure(2)
plot(aoat,C)
title('Lift to Drag Ratio vs. Airfoil Angle')
xlabel('Angle of Attack (degrees, where 0° is horizontal)')
ylabel('C')
ymin = -10;
ymax = 18;
xmin = -10;
xmax = 22;
axis ([xmin xmax ymin ymax])

%% 7. Estimate Lift and Drag Force from Pressure Profile Measurements (0, 9, 18 deg.)
%compute the lift and drag forces using gage pressure

%assume that the gage pressure at the trailing edge of the airfoil is equal
%to the pressure at the last port on the airfoil

%assume that the pressure at the leading edge of the airfoil is the
%stagnation rpessure as measured by the Pitot-static tube. The leading edge
%will rotate however this effect will be ignored

%use the NACA 0012 airfoil from the PowerPoint, it is necessary to find the
%x-position of pressure taps, they are in a table at the end of the lab
%document.

Yupper = NACA0012(UpperTapsX,150); %meters, solving for the Y positions of the upper pressure taps
Ylower = NACA0012(LowerTapsX,150); %meters, solving for the Y positions of the lower pressure taps

upperZeroDegP = [stagP; zeroDeg(3:12); zeroDeg(12)];
lowerZeroDegP = [stagP; zeroDeg(13:22); zeroDeg(22)];
upperNineDegP = [stagP; nineDeg(3:12); nineDeg(12)]; %finding the gage pressures for the upper pressure taps on the airfoil
lowerNineDegP = [stagP; nineDeg(13:22); nineDeg(22)]; %same for lower side of the airfoil
upperEighteenDegP = [stagP; eighteenDeg(3:12); eighteenDeg(12)];
lowerEighteenDegP = [stagP; eighteenDeg(13:22); eighteenDeg(22)];

uzdpa = pavg(upperZeroDegP); %creates pressure vectors that are normal to the angles generated by the line drawing
lzdpa = pavg(lowerZeroDegP);
undpa = pavg(upperNineDegP);
lndpa = pavg(lowerNineDegP);
uedpa = pavg(upperEighteenDegP);
ledpa = pavg(lowerEighteenDegP);

[zerodegfx,zerodegfy] = forces(0,uzdpa,lzdpa,UpperTapsX,Yupper,LowerTapsX,Ylower); %zero degrees
[ninedegfx,ninedegfy] = forces(9,undpa,lndpa,UpperTapsX,Yupper,LowerTapsX,Ylower); %nine degrees
[eighteendegfx,eighteendegfy] = forces(18,uedpa,ledpa,UpperTapsX,Yupper,LowerTapsX,Ylower); %eighteen degrees

%% 8. Model the Airfoil as a Flat Plate, Estimate Skin Friction
% See equation 9.34 from the fluids book to make this estimate
v = 1.568e-5; %m^2/s, kinematic viscosity of air at 300 K from engineering toolbox
ReL = vel*.15/v; %using a Reynold's number for laminar flow because Gross said so

cDcalc = .0742/((ReL)^.2);
crossA = .15*.3; %m^2, modeling the airfoil as a plate, the reference area is the surface area of the plate
FskinDrag = 1*(.5*rho*(vel^2)*crossA*cDcalc); %this gets multiplied by two since there are two sides to the airfoil

%% 9. Estimate and Tabulate Induced Drag as a Function of Angle of Attack
Sigma = .7; %this is an efficiency factor, we are using this value because it was given in the slides
AR = 2; %this is the aspect ratio of the wing, 2:1 in this case
CDI = (cL.^2)./(pi*AR*Sigma); %note that the cL values are different for every angle of attack, therefor the Induced Drag coefficient is as well
FIndDrag = 1*(.5*rho*(vel^2)*crossA.*CDI); %calculating induced drag

%% 10. Estimate and Tabulate Form Drag as a Function of Angle of Attack
%this part uses the results of 7.a
%the existing points will be interpolated to have values at more angles

%% 11. Plot: Estimaated Skin Drag, Estimated Induced Drag, Estimated Form Drag, and Measured Drag as a Function of Angle of Attack
FSDE = ones(11,1).*FskinDrag; %creating an array of estimated skin drags since they are the same at all angles
FIDE = FIndDrag; %renaming to make it easier to plot
FFDE = [zerodegfx; ninedegfx; eighteendegfx]; %making an array of the estimated form drags
FFDM = D; %making an array of the measured form drags (bad data!). This drag array is longer than the others
Angles11 = aoat; %creating the larger angle array so FFDM can be plotted, 11 elements in the matrix
Angles3 = [0; 9; 18]; %creating the smaller array

figure(3)
plot(Angles11,FSDE,Angles11,FIDE,Angles3,FFDE,Angles11,FFDM,'--')
xlabel('Angle of Attack (degrees, where 0° is horizontal)')
ylabel('Drag Force (N)')
legend('Estimated Skin Friction Drag','Estimated Induced Drag','Estimated Form Drag','Measured Drag Force','location','northwest')
grid on

%% 12. At Maximum Lift, Estimate Uncertainty in cL using Truncated Taylor Series
%uncertainty in lift is .01 N
%uncertainty in manometer readings is .05 inches of water
%uncertainty in the planform area id .25 square millimeters
%uncertainty in air density is .05 kg/m^3






